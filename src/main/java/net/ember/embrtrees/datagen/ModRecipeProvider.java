package net.ember.embrtrees.datagen;

import net.ember.embrtrees.EmbrTrees;
import net.ember.embrtrees.block.ModBlocks;
import net.ember.embrtrees.item.ModItems;
import net.ember.embrtrees.util.ModTags;
import net.minecraft.advancements.critereon.ItemPredicate;
import net.minecraft.data.PackOutput;
import net.minecraft.data.recipes.*;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Blocks;
import net.minecraftforge.common.crafting.conditions.IConditionBuilder;

import java.util.function.Consumer;

public class ModRecipeProvider extends RecipeProvider implements IConditionBuilder {
    public ModRecipeProvider(PackOutput output) {
        super(output);
    }

    @Override
    protected void buildRecipes(Consumer<FinishedRecipe> consumer) {
//ASH WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_PLANKS.get(), 4)
                .requires(ModTags.Items.ASH_LOGS)
                .unlockedBy("has_ash_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_WOOD.get(), 3)
                .define('X', ModBlocks.ASH_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ash_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_ASH_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_ASH_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ash_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_ASH_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_DOOR.get(), 3)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_STAIRS.get(), 4)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_SLAB.get(), 6)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_FENCE.get(), 3)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASH_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.ASH_BUTTON.get(), 1)
                .requires(ModBlocks.ASH_PLANKS.get())
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASH_SIGN.get(), 3)
                .define('X', ModBlocks.ASH_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASH_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_ASH_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASH_BOAT.get())
                .define('X', ModBlocks.ASH_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASH_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.ASH_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_ash_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASH_PLANKS.get()).build()))
                .save(consumer);
//ASTRAL WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_PLANKS.get(), 4)
                .requires(ModTags.Items.ASTRAL_LOGS)
                .unlockedBy("has_astral_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_WOOD.get(), 3)
                .define('X', ModBlocks.ASTRAL_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_astral_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_ASTRAL_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_ASTRAL_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_astral_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_ASTRAL_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_DOOR.get(), 3)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_STAIRS.get(), 4)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_SLAB.get(), 6)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_FENCE.get(), 3)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ASTRAL_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.ASTRAL_BUTTON.get(), 1)
                .requires(ModBlocks.ASTRAL_PLANKS.get())
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASTRAL_SIGN.get(), 3)
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASTRAL_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_ASTRAL_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASTRAL_BOAT.get())
                .define('X', ModBlocks.ASTRAL_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ASTRAL_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.ASTRAL_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_astral_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ASTRAL_PLANKS.get()).build()))
                .save(consumer);
//BLOSSOM WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_PLANKS.get(), 4)
                .requires(ModTags.Items.BLOSSOM_LOGS)
                .unlockedBy("has_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_WOOD.get(), 3)
                .define('X', ModBlocks.BLOSSOM_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_BLOSSOM_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_BLOSSOM_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_BLOSSOM_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_DOOR.get(), 3)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_STAIRS.get(), 4)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_SLAB.get(), 6)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_FENCE.get(), 3)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLOSSOM_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.BLOSSOM_BUTTON.get(), 1)
                .requires(ModBlocks.BLOSSOM_PLANKS.get())
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLOSSOM_SIGN.get(), 3)
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLOSSOM_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_BLOSSOM_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLOSSOM_BOAT.get())
                .define('X', ModBlocks.BLOSSOM_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLOSSOM_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.BLOSSOM_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
//VOID_BLOSSOM WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_PLANKS.get(), 4)
                .requires(ModTags.Items.VOID_BLOSSOM_LOGS)
                .unlockedBy("has_void_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_WOOD.get(), 3)
                .define('X', ModBlocks.VOID_BLOSSOM_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_void_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_VOID_BLOSSOM_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_VOID_BLOSSOM_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_void_blossom_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_VOID_BLOSSOM_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_DOOR.get(), 3)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_STAIRS.get(), 4)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_SLAB.get(), 6)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_FENCE.get(), 3)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VOID_BLOSSOM_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.VOID_BLOSSOM_BUTTON.get(), 1)
                .requires(ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VOID_BLOSSOM_SIGN.get(), 3)
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VOID_BLOSSOM_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_VOID_BLOSSOM_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VOID_BLOSSOM_BOAT.get())
                .define('X', ModBlocks.VOID_BLOSSOM_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VOID_BLOSSOM_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.VOID_BLOSSOM_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_void_blossom_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VOID_BLOSSOM_PLANKS.get()).build()))
                .save(consumer);
//GHOSTWOOD WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_PLANKS.get(), 4)
                .requires(ModTags.Items.GHOSTWOOD_LOGS)
                .unlockedBy("has_ghostwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.GHOSTWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ghostwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_GHOSTWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_GHOSTWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ghostwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_GHOSTWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_DOOR.get(), 3)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_STAIRS.get(), 4)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_SLAB.get(), 6)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_FENCE.get(), 3)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.GHOSTWOOD_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.GHOSTWOOD_BUTTON.get(), 1)
                .requires(ModBlocks.GHOSTWOOD_PLANKS.get())
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.GHOSTWOOD_SIGN.get(), 3)
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.GHOSTWOOD_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_GHOSTWOOD_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.GHOSTWOOD_BOAT.get())
                .define('X', ModBlocks.GHOSTWOOD_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.GHOSTWOOD_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.GHOSTWOOD_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_ghostwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.GHOSTWOOD_PLANKS.get()).build()))
                .save(consumer);
//MAHOGANY WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_PLANKS.get(), 4)
                .requires(ModTags.Items.MAHOGANY_LOGS)
                .unlockedBy("has_mahogany_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_WOOD.get(), 3)
                .define('X', ModBlocks.MAHOGANY_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_mahogany_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_MAHOGANY_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_MAHOGANY_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_mahogany_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_MAHOGANY_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_DOOR.get(), 3)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_STAIRS.get(), 4)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_SLAB.get(), 6)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_FENCE.get(), 3)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.MAHOGANY_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.MAHOGANY_BUTTON.get(), 1)
                .requires(ModBlocks.MAHOGANY_PLANKS.get())
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.MAHOGANY_SIGN.get(), 3)
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.MAHOGANY_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_MAHOGANY_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.MAHOGANY_BOAT.get())
                .define('X', ModBlocks.MAHOGANY_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.MAHOGANY_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.MAHOGANY_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_mahogany_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.MAHOGANY_PLANKS.get()).build()))
                .save(consumer);
//OCEANIC WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_PLANKS.get(), 4)
                .requires(ModTags.Items.OCEANIC_LOGS)
                .unlockedBy("has_oceanic_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_WOOD.get(), 3)
                .define('X', ModBlocks.OCEANIC_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_oceanic_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_OCEANIC_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_OCEANIC_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_oceanic_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_OCEANIC_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_DOOR.get(), 3)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_STAIRS.get(), 4)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_SLAB.get(), 6)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_FENCE.get(), 3)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.OCEANIC_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.OCEANIC_BUTTON.get(), 1)
                .requires(ModBlocks.OCEANIC_PLANKS.get())
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.OCEANIC_SIGN.get(), 3)
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.OCEANIC_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_OCEANIC_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.OCEANIC_BOAT.get())
                .define('X', ModBlocks.OCEANIC_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.OCEANIC_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.OCEANIC_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_oceanic_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.OCEANIC_PLANKS.get()).build()))
                .save(consumer);
//QUARTZWOOD WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_PLANKS.get(), 4)
                .requires(ModTags.Items.QUARTZWOOD_LOGS)
                .unlockedBy("has_quartzwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.QUARTZWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_quartzwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_QUARTZWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_QUARTZWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_quartzwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_QUARTZWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_DOOR.get(), 3)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_STAIRS.get(), 4)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_SLAB.get(), 6)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_FENCE.get(), 3)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.QUARTZWOOD_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.QUARTZWOOD_BUTTON.get(), 1)
                .requires(ModBlocks.QUARTZWOOD_PLANKS.get())
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.QUARTZWOOD_SIGN.get(), 3)
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.QUARTZWOOD_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_QUARTZWOOD_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.QUARTZWOOD_BOAT.get())
                .define('X', ModBlocks.QUARTZWOOD_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.QUARTZWOOD_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.QUARTZWOOD_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_quartzwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.QUARTZWOOD_PLANKS.get()).build()))
                .save(consumer);
//VAMPIRIC WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_PLANKS.get(), 4)
                .requires(ModTags.Items.VAMPIRIC_LOGS)
                .unlockedBy("has_vampiric_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_WOOD.get(), 3)
                .define('X', ModBlocks.VAMPIRIC_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_vampiric_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_VAMPIRIC_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_VAMPIRIC_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_vampiric_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_VAMPIRIC_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_DOOR.get(), 3)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_STAIRS.get(), 4)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_SLAB.get(), 6)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_FENCE.get(), 3)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.VAMPIRIC_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.VAMPIRIC_BUTTON.get(), 1)
                .requires(ModBlocks.VAMPIRIC_PLANKS.get())
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VAMPIRIC_SIGN.get(), 3)
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VAMPIRIC_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_VAMPIRIC_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VAMPIRIC_BOAT.get())
                .define('X', ModBlocks.VAMPIRIC_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.VAMPIRIC_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.VAMPIRIC_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_vampiric_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.VAMPIRIC_PLANKS.get()).build()))
                .save(consumer);
//WILLOW WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_PLANKS.get(), 4)
                .requires(ModTags.Items.WILLOW_LOGS)
                .unlockedBy("has_willow_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_WOOD.get(), 3)
                .define('X', ModBlocks.WILLOW_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_willow_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_WILLOW_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_WILLOW_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_willow_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_WILLOW_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_DOOR.get(), 3)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_STAIRS.get(), 4)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_SLAB.get(), 6)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_FENCE.get(), 3)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WILLOW_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.WILLOW_BUTTON.get(), 1)
                .requires(ModBlocks.WILLOW_PLANKS.get())
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WILLOW_SIGN.get(), 3)
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WILLOW_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_WILLOW_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WILLOW_BOAT.get())
                .define('X', ModBlocks.WILLOW_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WILLOW_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.WILLOW_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_willow_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WILLOW_PLANKS.get()).build()))
                .save(consumer);
//BLACKWOOD WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_PLANKS.get(), 4)
                .requires(ModTags.Items.BLACKWOOD_LOGS)
                .unlockedBy("has_blackwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.BLACKWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blackwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_BLACKWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_BLACKWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blackwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_BLACKWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_DOOR.get(), 3)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_STAIRS.get(), 4)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_SLAB.get(), 6)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_FENCE.get(), 3)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.BLACKWOOD_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.BLACKWOOD_BUTTON.get(), 1)
                .requires(ModBlocks.BLACKWOOD_PLANKS.get())
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLACKWOOD_SIGN.get(), 3)
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLACKWOOD_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_BLACKWOOD_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLACKWOOD_BOAT.get())
                .define('X', ModBlocks.BLACKWOOD_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.BLACKWOOD_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.BLACKWOOD_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_blackwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.BLACKWOOD_PLANKS.get()).build()))
                .save(consumer);
//WALNUT WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_PLANKS.get(), 4)
                .requires(ModTags.Items.WALNUT_LOGS)
                .unlockedBy("has_walnut_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_WOOD.get(), 3)
                .define('X', ModBlocks.WALNUT_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_walnut_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_WALNUT_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_WALNUT_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_walnut_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_WALNUT_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_DOOR.get(), 3)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_STAIRS.get(), 4)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_SLAB.get(), 6)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_FENCE.get(), 3)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.WALNUT_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.WALNUT_BUTTON.get(), 1)
                .requires(ModBlocks.WALNUT_PLANKS.get())
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WALNUT_SIGN.get(), 3)
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WALNUT_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_WALNUT_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WALNUT_BOAT.get())
                .define('X', ModBlocks.WALNUT_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.WALNUT_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.WALNUT_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_walnut_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.WALNUT_PLANKS.get()).build()))
                .save(consumer);
//HEARTWOOD WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_PLANKS.get(), 4)
                .requires(ModTags.Items.HEARTWOOD_LOGS)
                .unlockedBy("has_heartwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.HEARTWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_heartwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_HEARTWOOD_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_HEARTWOOD_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_heartwood_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_HEARTWOOD_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_DOOR.get(), 3)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_STAIRS.get(), 4)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_SLAB.get(), 6)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_FENCE.get(), 3)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.HEARTWOOD_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.HEARTWOOD_BUTTON.get(), 1)
                .requires(ModBlocks.HEARTWOOD_PLANKS.get())
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.HEARTWOOD_SIGN.get(), 3)
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.HEARTWOOD_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_HEARTWOOD_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.HEARTWOOD_BOAT.get())
                .define('X', ModBlocks.HEARTWOOD_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.HEARTWOOD_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.HEARTWOOD_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_heartwood_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.HEARTWOOD_PLANKS.get()).build()))
                .save(consumer);
//SUNRISE WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_PLANKS.get(), 4)
                .requires(ModTags.Items.SUNRISE_LOGS)
                .unlockedBy("has_sunrise_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_WOOD.get(), 3)
                .define('X', ModBlocks.SUNRISE_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_sunrise_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_SUNRISE_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_SUNRISE_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_sunrise_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_SUNRISE_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_DOOR.get(), 3)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_STAIRS.get(), 4)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_SLAB.get(), 6)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_FENCE.get(), 3)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.SUNRISE_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.SUNRISE_BUTTON.get(), 1)
                .requires(ModBlocks.SUNRISE_PLANKS.get())
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.SUNRISE_SIGN.get(), 3)
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.SUNRISE_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_SUNRISE_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.SUNRISE_BOAT.get())
                .define('X', ModBlocks.SUNRISE_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.SUNRISE_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.SUNRISE_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_sunrise_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.SUNRISE_PLANKS.get()).build()))
                .save(consumer);
//ERROR WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_PLANKS.get(), 4)
                .requires(ModTags.Items.ERROR_LOGS)
                .unlockedBy("has_error_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_WOOD.get(), 3)
                .define('X', ModBlocks.ERROR_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_error_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_ERROR_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_ERROR_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_error_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_ERROR_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_DOOR.get(), 3)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_STAIRS.get(), 4)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_SLAB.get(), 6)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_FENCE.get(), 3)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.ERROR_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.ERROR_BUTTON.get(), 1)
                .requires(ModBlocks.ERROR_PLANKS.get())
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ERROR_SIGN.get(), 3)
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ERROR_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_ERROR_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ERROR_BOAT.get())
                .define('X', ModBlocks.ERROR_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.ERROR_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.ERROR_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_error_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.ERROR_PLANKS.get()).build()))
                .save(consumer);
//CYAN WOOD
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_PLANKS.get(), 4)
                .requires(ModTags.Items.CYAN_LOGS)
                .unlockedBy("has_cyan_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of().build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_WOOD.get(), 3)
                .define('X', ModBlocks.CYAN_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_cyan_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.STRIPPED_CYAN_WOOD.get(), 3)
                .define('X', ModBlocks.STRIPPED_CYAN_LOG.get())
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_cyan_log", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.STRIPPED_CYAN_LOG.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_DOOR.get(), 3)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("XX")
                .pattern("XX")
                .pattern("XX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_TRAPDOOR.get(), 2)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_STAIRS.get(), 4)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("X  ")
                .pattern("XX ")
                .pattern("XXX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_SLAB.get(), 6)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("XXX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_FENCE.get(), 3)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XOX")
                .pattern("XOX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_FENCE_GATE.get(), 1)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("OXO")
                .pattern("OXO")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModBlocks.CYAN_PRESSURE_PLATE.get(), 1)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("XX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, ModBlocks.CYAN_BUTTON.get(), 1)
                .requires(ModBlocks.CYAN_PLANKS.get())
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.CYAN_SIGN.get(), 3)
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .define('O', Items.STICK)
                .pattern("XXX")
                .pattern("XXX")
                .pattern(" O ")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.CYAN_HANGING_SIGN.get(), 6)
                .define('X', ModBlocks.STRIPPED_CYAN_LOG.get())
                .define('O', Blocks.CHAIN)
                .pattern("O O")
                .pattern("XXX")
                .pattern("XXX")
                .unlockedBy("has_chain", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(Blocks.CHAIN).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.CYAN_BOAT.get())
                .define('X', ModBlocks.CYAN_PLANKS.get())
                .pattern("X X")
                .pattern("XXX")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, ModItems.CYAN_CHEST_BOAT.get())
                .define('O', Items.CHEST)
                .define('X', ModItems.CYAN_BOAT.get())
                .pattern("O")
                .pattern("X")
                .unlockedBy("has_cyan_planks", inventoryTrigger(ItemPredicate.Builder.item()
                        .of(ModBlocks.CYAN_PLANKS.get()).build()))
                .save(consumer);
    }
}
